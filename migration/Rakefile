require 'erb'
require 'yaml'
require 'active_record'

$all = YAML::load(File.open('database.yml'))
$common = $all['common']

DEFAULT_ENV = 'development'

def get_config(env = nil)
  env ||= DEFAULT_ENV
  $common.merge($all[env])
end

def get_admin_config(env = nil)
  env ||= DEFAULT_ENV
  config = $common.merge($all[env])
  admin_config = config.dup
  admin_config['database'] = 'postgres'
  admin_config
end

p "[info] ActiveRecord version: #{ActiveRecord::VERSION::STRING}"

namespace :db do

  desc "Init the database"
  task :init, 'env'
  task :init do |t, args|
    config = get_config args['env']
    admin_config = get_admin_config args['env']
    ActiveRecord::Base.establish_connection(admin_config)
    ActiveRecord::Base.connection.execute("drop database  if exists #{config['database']}")
    ActiveRecord::Base.connection.execute("create database #{config['database']}")
  end

end

namespace :schema do

  desc "Dump the schema structures"
  task :dump, 'env', 'version'
  task :dump do |t, args|
    config = get_config args['env']
    version = args['version']
    version ||= Time.now.strftime('%Y%m%d%H%M%S')
    path = "schema/#{version}.sql"
    sh "pg_dump -U #{config['username']} -d #{config['database']} -h #{config['host']} -s > #{path}"
    sh "chmod 666 #{path}"
  end

  desc "Load schema structures from dump file"
  task :load, 'env', 'version'
  task :load do |t, args|
    config = get_config args['env']
    version = args['version']
    version ||= Time.now.strftime('%Y%m%d%H%M%S')
    sh "psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -f schema/#{version}.sql"
  end

end

namespace :data do

  desc "import table data from data directory"
  task :import, 'env', 'dir'
  task :import do |t, args|
    config = get_config args['env']
    dir = args['dir']
    Dir.foreach(dir) do |file|
      next if file == '.' or file == '..'
      tablename = file.split('.')[0]
      sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "\\copy #{tablename} from '#{dir}/#{file}' CSV HEADER"]
    end
  end

  desc "export table data into export directory by csv files"
  task :export, 'env', 'table'
  task :export do |t, args|
    config = get_config args['env']
    timestamp = Time.now.strftime('%Y%m%d%H%M%S')
    table = args['table']
    sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "\\copy #{table} to '#{table}_#{timestamp}.csv' CSV HEADER"]
  end

  desc "clear master table data"
  task :clear_master, 'env'
  task :clear_master do |t, args|
    config = get_config args['env']
    sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "truncate table nendo_masters"]
    sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "truncate table kamoku_bunrui_masters"]
    sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "truncate table kamoku_masters"]
    sh %Q[psql -U #{config['username']} -d #{config['database']} -h #{config['host']} -c "truncate table saimoku_masters"]
  end

  desc "back up all data"
  task :backup, 'env', 'version'
  task :backup do |t, args|
    config = get_config args['env']
    version = args['version']
    version ||= Time.now.strftime('%Y%m%d%H%M%S')
    path = "data/backup/#{version}.sql"
    sh "pg_dump -U #{config['username']} -d #{config['database']} -h #{config['host']} -a > #{path}"
    sh "chmod 666 #{path}"
  end

end

namespace :migrate do

  desc 'Migrate the database'
  task :run, 'env'
  task :run do |t, args|
    config = get_config args['env']
    ActiveRecord::Base.establish_connection(config)
    context = ActiveRecord::MigrationContext.new(File.expand_path('./migrate'), ActiveRecord::SchemaMigration)
    context.migrate
    Rake::Task["schema:dump"].invoke(args['env'], ActiveRecord::Migrator.current_version)
  end

  desc 'Generate migration'
  task :generate, 'name'
  task :generate do |t, args|
    name = args['name']
    timestamp = Time.now.strftime('%Y%m%d%H%M%S')
    path = File.expand_path("../migrate/#{timestamp}_#{name}.rb", __FILE__)

    class_name = name.split('_').map(&:capitalize).join
    File.open(path, 'w') do |file|
      file.write <<-EOF
class #{class_name} < ActiveRecord::Migration[5.0]
  def change
  end
  def self.up
  end
  def self.down
  end
end
      EOF
    end
    p "Migration file '#{path}' created"
    sh "chmod 666 #{path}"

  end

end
